
project_tfl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000050  08003348  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003348  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c005  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c58  00000000  00000000  0002c07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017069  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6a6  00000000  00000000  000465a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868e5  00000000  00000000  00054c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db52c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000db580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b0 	.word	0x080032b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080032b0 	.word	0x080032b0

0800014c <button_run>:
											  {button_released, button_released},
											  {button_released, button_released} };
int hold_counter[n0_button] = {duration_hold, duration_hold, duration_hold};
int hold_counter_automatic[n0_button] = {1, 1, 1};

void button_run() {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < n0_button; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	60fb      	str	r3, [r7, #12]
 8000156:	e0de      	b.n	8000316 <button_run+0x1ca>
		for (int j = 0; j < n0_button_debounce - 1; j++) {
 8000158:	2300      	movs	r3, #0
 800015a:	60bb      	str	r3, [r7, #8]
 800015c:	e016      	b.n	800018c <button_run+0x40>
			button_debounce[i][j] = button_debounce[i][j+1];
 800015e:	68bb      	ldr	r3, [r7, #8]
 8000160:	1c59      	adds	r1, r3, #1
 8000162:	4871      	ldr	r0, [pc, #452]	; (8000328 <button_run+0x1dc>)
 8000164:	68fa      	ldr	r2, [r7, #12]
 8000166:	4613      	mov	r3, r2
 8000168:	005b      	lsls	r3, r3, #1
 800016a:	4413      	add	r3, r2
 800016c:	4403      	add	r3, r0
 800016e:	440b      	add	r3, r1
 8000170:	7818      	ldrb	r0, [r3, #0]
 8000172:	496d      	ldr	r1, [pc, #436]	; (8000328 <button_run+0x1dc>)
 8000174:	68fa      	ldr	r2, [r7, #12]
 8000176:	4613      	mov	r3, r2
 8000178:	005b      	lsls	r3, r3, #1
 800017a:	4413      	add	r3, r2
 800017c:	18ca      	adds	r2, r1, r3
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	4413      	add	r3, r2
 8000182:	4602      	mov	r2, r0
 8000184:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < n0_button_debounce - 1; j++) {
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	3301      	adds	r3, #1
 800018a:	60bb      	str	r3, [r7, #8]
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b01      	cmp	r3, #1
 8000190:	dde5      	ble.n	800015e <button_run+0x12>
		}
		if (i == 0) {
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d110      	bne.n	80001ba <button_run+0x6e>
			button_debounce[i][n0_button_debounce - 1] = HAL_GPIO_ReadPin(bt0_GPIO_Port, bt0_Pin);
 8000198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019c:	4863      	ldr	r0, [pc, #396]	; (800032c <button_run+0x1e0>)
 800019e:	f001 fbc9 	bl	8001934 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4618      	mov	r0, r3
 80001a6:	4960      	ldr	r1, [pc, #384]	; (8000328 <button_run+0x1dc>)
 80001a8:	68fa      	ldr	r2, [r7, #12]
 80001aa:	4613      	mov	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	4413      	add	r3, r2
 80001b0:	440b      	add	r3, r1
 80001b2:	3302      	adds	r3, #2
 80001b4:	4602      	mov	r2, r0
 80001b6:	701a      	strb	r2, [r3, #0]
 80001b8:	e022      	b.n	8000200 <button_run+0xb4>
		} else if (i == 1) {
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d110      	bne.n	80001e2 <button_run+0x96>
			button_debounce[i][n0_button_debounce - 1] = HAL_GPIO_ReadPin(bt1_GPIO_Port, bt1_Pin);
 80001c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c4:	4859      	ldr	r0, [pc, #356]	; (800032c <button_run+0x1e0>)
 80001c6:	f001 fbb5 	bl	8001934 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4618      	mov	r0, r3
 80001ce:	4956      	ldr	r1, [pc, #344]	; (8000328 <button_run+0x1dc>)
 80001d0:	68fa      	ldr	r2, [r7, #12]
 80001d2:	4613      	mov	r3, r2
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	4413      	add	r3, r2
 80001d8:	440b      	add	r3, r1
 80001da:	3302      	adds	r3, #2
 80001dc:	4602      	mov	r2, r0
 80001de:	701a      	strb	r2, [r3, #0]
 80001e0:	e00e      	b.n	8000200 <button_run+0xb4>
		} else {
			button_debounce[i][n0_button_debounce - 1] = HAL_GPIO_ReadPin(bt2_GPIO_Port, bt2_Pin);
 80001e2:	2180      	movs	r1, #128	; 0x80
 80001e4:	4852      	ldr	r0, [pc, #328]	; (8000330 <button_run+0x1e4>)
 80001e6:	f001 fba5 	bl	8001934 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4618      	mov	r0, r3
 80001ee:	494e      	ldr	r1, [pc, #312]	; (8000328 <button_run+0x1dc>)
 80001f0:	68fa      	ldr	r2, [r7, #12]
 80001f2:	4613      	mov	r3, r2
 80001f4:	005b      	lsls	r3, r3, #1
 80001f6:	4413      	add	r3, r2
 80001f8:	440b      	add	r3, r1
 80001fa:	3302      	adds	r3, #2
 80001fc:	4602      	mov	r2, r0
 80001fe:	701a      	strb	r2, [r3, #0]
		}
		int same_debounce = 1;
 8000200:	2301      	movs	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < n0_button_debounce - 1; j++) {
 8000204:	2300      	movs	r3, #0
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e01a      	b.n	8000240 <button_run+0xf4>
			if (button_debounce[i][j] != button_debounce[i][j+1]) {
 800020a:	4947      	ldr	r1, [pc, #284]	; (8000328 <button_run+0x1dc>)
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	4613      	mov	r3, r2
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	4413      	add	r3, r2
 8000214:	18ca      	adds	r2, r1, r3
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	4413      	add	r3, r2
 800021a:	7819      	ldrb	r1, [r3, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	1c58      	adds	r0, r3, #1
 8000220:	4c41      	ldr	r4, [pc, #260]	; (8000328 <button_run+0x1dc>)
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	4613      	mov	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	4413      	add	r3, r2
 800022a:	4423      	add	r3, r4
 800022c:	4403      	add	r3, r0
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4299      	cmp	r1, r3
 8000232:	d002      	beq.n	800023a <button_run+0xee>
				same_debounce = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	607b      	str	r3, [r7, #4]
				break;
 8000238:	e005      	b.n	8000246 <button_run+0xfa>
		for (int j = 0; j < n0_button_debounce - 1; j++) {
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	2b01      	cmp	r3, #1
 8000244:	dde1      	ble.n	800020a <button_run+0xbe>
			}
		}
		button_buffer[i][0] = button_buffer[i][1];
 8000246:	4a3b      	ldr	r2, [pc, #236]	; (8000334 <button_run+0x1e8>)
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	4413      	add	r3, r2
 800024e:	7859      	ldrb	r1, [r3, #1]
 8000250:	4a38      	ldr	r2, [pc, #224]	; (8000334 <button_run+0x1e8>)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		if (same_debounce == 1) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d10c      	bne.n	8000278 <button_run+0x12c>
			button_buffer[i][1] = button_debounce[i][0];
 800025e:	4932      	ldr	r1, [pc, #200]	; (8000328 <button_run+0x1dc>)
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4613      	mov	r3, r2
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	4413      	add	r3, r2
 8000268:	440b      	add	r3, r1
 800026a:	7819      	ldrb	r1, [r3, #0]
 800026c:	4a31      	ldr	r2, [pc, #196]	; (8000334 <button_run+0x1e8>)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4413      	add	r3, r2
 8000274:	460a      	mov	r2, r1
 8000276:	705a      	strb	r2, [r3, #1]
		}
		button_flag[i] = 0;
 8000278:	4a2f      	ldr	r2, [pc, #188]	; (8000338 <button_run+0x1ec>)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2100      	movs	r1, #0
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (button_buffer[i][1] == button_pressed) {
 8000282:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <button_run+0x1e8>)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	4413      	add	r3, r2
 800028a:	785b      	ldrb	r3, [r3, #1]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d135      	bne.n	80002fc <button_run+0x1b0>
			if (hold_counter[i] > 1) {
 8000290:	4a2a      	ldr	r2, [pc, #168]	; (800033c <button_run+0x1f0>)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	dd14      	ble.n	80002c6 <button_run+0x17a>
				hold_counter[i]--;
 800029c:	4a27      	ldr	r2, [pc, #156]	; (800033c <button_run+0x1f0>)
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	1e5a      	subs	r2, r3, #1
 80002a6:	4925      	ldr	r1, [pc, #148]	; (800033c <button_run+0x1f0>)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_buffer[i][0] == button_released) {
 80002ae:	4a21      	ldr	r2, [pc, #132]	; (8000334 <button_run+0x1e8>)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d12a      	bne.n	8000310 <button_run+0x1c4>
					button_flag[i] = 1;
 80002ba:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <button_run+0x1ec>)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2101      	movs	r1, #1
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c4:	e024      	b.n	8000310 <button_run+0x1c4>
				}
			} else if (hold_counter_automatic[i] > 1) {
 80002c6:	4a1e      	ldr	r2, [pc, #120]	; (8000340 <button_run+0x1f4>)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	dd09      	ble.n	80002e6 <button_run+0x19a>
				hold_counter_automatic[i]--;
 80002d2:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <button_run+0x1f4>)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4918      	ldr	r1, [pc, #96]	; (8000340 <button_run+0x1f4>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002e4:	e014      	b.n	8000310 <button_run+0x1c4>
			} else {
				hold_counter_automatic[i] = duration_hold_automatic;
 80002e6:	4a16      	ldr	r2, [pc, #88]	; (8000340 <button_run+0x1f4>)
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2114      	movs	r1, #20
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				button_flag[i] = 1;
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <button_run+0x1ec>)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2101      	movs	r1, #1
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002fa:	e009      	b.n	8000310 <button_run+0x1c4>
			}
		} else {
			hold_counter[i] = duration_hold;
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <button_run+0x1f0>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	21c8      	movs	r1, #200	; 0xc8
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			hold_counter_automatic[i] = 1;
 8000306:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <button_run+0x1f4>)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	2101      	movs	r1, #1
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < n0_button; i++) {
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3301      	adds	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2b02      	cmp	r3, #2
 800031a:	f77f af1d 	ble.w	8000158 <button_run+0xc>
		}
	}
}
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	20000000 	.word	0x20000000
 800032c:	40010800 	.word	0x40010800
 8000330:	40011000 	.word	0x40011000
 8000334:	2000000c 	.word	0x2000000c
 8000338:	2000006c 	.word	0x2000006c
 800033c:	20000014 	.word	0x20000014
 8000340:	20000020 	.word	0x20000020

08000344 <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD ( 0x21 << 1 ) // change this according to your setup

void lcd_send_cmd(char cmd) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af02      	add	r7, sp, #8
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f023 030f 	bic.w	r3, r3, #15
 8000354:	73fb      	strb	r3, [r7, #15]
	data_l = ( (cmd<<4) & 0xf0 );
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C; // en=1, rs=0
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	f043 030c 	orr.w	r3, r3, #12
 8000362:	b2db      	uxtb	r3, r3
 8000364:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; // en=0, rs=0
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	b2db      	uxtb	r3, r3
 800036e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; // en=1, rs=0
 8000370:	7bbb      	ldrb	r3, [r7, #14]
 8000372:	f043 030c 	orr.w	r3, r3, #12
 8000376:	b2db      	uxtb	r3, r3
 8000378:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; // en=0, rs=0
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	f043 0308 	orr.w	r3, r3, #8
 8000380:	b2db      	uxtb	r3, r3
 8000382:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000384:	f107 0208 	add.w	r2, r7, #8
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2304      	movs	r3, #4
 800038e:	2142      	movs	r1, #66	; 0x42
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <lcd_send_cmd+0x5c>)
 8000392:	f001 fc5b 	bl	8001c4c <HAL_I2C_Master_Transmit>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000090 	.word	0x20000090

080003a4 <lcd_send_data>:

void lcd_send_data(char data) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	73fb      	strb	r3, [r7, #15]
	data_l = ( (data << 4) & 0xf0 );
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	011b      	lsls	r3, r3, #4
 80003ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D; // en=1, rs=0
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	f043 030d 	orr.w	r3, r3, #13
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; // en=0, rs=0
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	f043 0309 	orr.w	r3, r3, #9
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; // en=1, rs=0
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	f043 030d 	orr.w	r3, r3, #13
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; // en=0, rs=0
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f043 0309 	orr.w	r3, r3, #9
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80003e4:	f107 0208 	add.w	r2, r7, #8
 80003e8:	2364      	movs	r3, #100	; 0x64
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2304      	movs	r3, #4
 80003ee:	2142      	movs	r1, #66	; 0x42
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <lcd_send_data+0x5c>)
 80003f2:	f001 fc2b 	bl	8001c4c <HAL_I2C_Master_Transmit>
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000090 	.word	0x20000090

08000404 <lcd_init>:

void lcd_init() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x33); /* set 4-bits interface */
 8000408:	2033      	movs	r0, #51	; 0x33
 800040a:	f7ff ff9b 	bl	8000344 <lcd_send_cmd>
	lcd_send_cmd(0x32);
 800040e:	2032      	movs	r0, #50	; 0x32
 8000410:	f7ff ff98 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 8000414:	2032      	movs	r0, #50	; 0x32
 8000416:	f000 ffd7 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x28); /* start to set LCD function */
 800041a:	2028      	movs	r0, #40	; 0x28
 800041c:	f7ff ff92 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 8000420:	2032      	movs	r0, #50	; 0x32
 8000422:	f000 ffd1 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x01); /* clear display */
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ff8c 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f000 ffcb 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x06); /* set entry mode */
 8000432:	2006      	movs	r0, #6
 8000434:	f7ff ff86 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 8000438:	2032      	movs	r0, #50	; 0x32
 800043a:	f000 ffc5 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x0c); /* set display to on */
 800043e:	200c      	movs	r0, #12
 8000440:	f7ff ff80 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 8000444:	2032      	movs	r0, #50	; 0x32
 8000446:	f000 ffbf 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x02); /* move cursor to home and set data address to 0 */
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff ff7a 	bl	8000344 <lcd_send_cmd>
	HAL_Delay(50);
 8000450:	2032      	movs	r0, #50	; 0x32
 8000452:	f000 ffb9 	bl	80013c8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8000456:	2080      	movs	r0, #128	; 0x80
 8000458:	f7ff ff74 	bl	8000344 <lcd_send_cmd>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}

08000460 <lcd_goto_XY>:

void lcd_clear_display() {
	lcd_send_cmd(0x01);
}

void lcd_goto_XY(int row, int col) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) {
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d108      	bne.n	8000482 <lcd_goto_XY+0x22>
		pos_Addr = 0x80 + row - 1 + col;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4413      	add	r3, r2
 800047a:	b2db      	uxtb	r3, r3
 800047c:	337f      	adds	r3, #127	; 0x7f
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e008      	b.n	8000494 <lcd_goto_XY+0x34>
	} else {
		pos_Addr = 0x80 | (0x40 + col);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	3340      	adds	r3, #64	; 0x40
 8000488:	b2db      	uxtb	r3, r3
 800048a:	b25b      	sxtb	r3, r3
 800048c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000490:	b25b      	sxtb	r3, r3
 8000492:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff54 	bl	8000344 <lcd_send_cmd>
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a8:	f000 ff2c 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f81c 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f8d0 	bl	8000654 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b4:	f000 f882 	bl	80005bc <MX_TIM2_Init>
  MX_I2C1_Init();
 80004b8:	f000 f852 	bl	8000560 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004bc:	4808      	ldr	r0, [pc, #32]	; (80004e0 <main+0x3c>)
 80004be:	f002 fb21 	bl	8002b04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80004c2:	f7ff ff9f 	bl	8000404 <lcd_init>
  while (1)
  {
	  if (timer_flag[0] == 1) {
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <main+0x40>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d1fb      	bne.n	80004c6 <main+0x22>
		  timer_set(0, 1);
 80004ce:	2101      	movs	r1, #1
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 fead 	bl	8001230 <timer_set>
		  button_run();
 80004d6:	f7ff fe39 	bl	800014c <button_run>
		  led_run();
 80004da:	f000 f937 	bl	800074c <led_run>
	  if (timer_flag[0] == 1) {
 80004de:	e7f2      	b.n	80004c6 <main+0x22>
 80004e0:	200000e4 	.word	0x200000e4
 80004e4:	20000088 	.word	0x20000088

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b090      	sub	sp, #64	; 0x40
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fed2 	bl	80032a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000516:	2300      	movs	r3, #0
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fe9a 	bl	8002258 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800052a:	f000 f90a 	bl	8000742 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f906 	bl	8002758 <HAL_RCC_ClockConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000552:	f000 f8f6 	bl	8000742 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3740      	adds	r7, #64	; 0x40
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000566:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <MX_I2C1_Init+0x54>)
 8000568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x50>)
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_I2C1_Init+0x58>)
 800056e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_I2C1_Init+0x50>)
 800057e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x50>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_I2C1_Init+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_I2C1_Init+0x50>)
 800059e:	f001 fa11 	bl	80019c4 <HAL_I2C_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a8:	f000 f8cb 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000090 	.word	0x20000090
 80005b4:	40005400 	.word	0x40005400
 80005b8:	000186a0 	.word	0x000186a0

080005bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_TIM2_Init+0x94>)
 80005da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_TIM2_Init+0x94>)
 80005e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_TIM2_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_TIM2_Init+0x94>)
 80005f0:	2209      	movs	r2, #9
 80005f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_TIM2_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_TIM2_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <MX_TIM2_Init+0x94>)
 8000602:	f002 fa2f 	bl	8002a64 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800060c:	f000 f899 	bl	8000742 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_TIM2_Init+0x94>)
 800061e:	f002 fbcb 	bl	8002db8 <HAL_TIM_ConfigClockSource>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 f88b 	bl	8000742 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_TIM2_Init+0x94>)
 800063a:	f002 fd9d 	bl	8003178 <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000644:	f000 f87d 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000e4 	.word	0x200000e4

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <MX_GPIO_Init+0xc0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <MX_GPIO_Init+0xc0>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_GPIO_Init+0xc0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xc0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a23      	ldr	r2, [pc, #140]	; (8000714 <MX_GPIO_Init+0xc0>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_GPIO_Init+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_GPIO_Init+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_GPIO_Init+0xc0>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_GPIO_Init+0xc0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, tf3_Pin|tf0_Pin|tf2_Pin|tf1_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80006b6:	4818      	ldr	r0, [pc, #96]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006b8:	f001 f953 	bl	8001962 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : tf3_Pin tf0_Pin tf2_Pin tf1_Pin */
  GPIO_InitStruct.Pin = tf3_Pin|tf0_Pin|tf2_Pin|tf1_Pin;
 80006bc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006d6:	f000 ffa9 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : bt2_Pin */
  GPIO_InitStruct.Pin = bt2_Pin;
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(bt2_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0xc8>)
 80006ee:	f000 ff9d 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : bt0_Pin bt1_Pin */
  GPIO_InitStruct.Pin = bt0_Pin|bt1_Pin;
 80006f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_GPIO_Init+0xcc>)
 8000708:	f000 ff90 	bl	800162c <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010c00 	.word	0x40010c00
 800071c:	40011000 	.word	0x40011000
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
		timer_run();
 8000736:	f000 fd93 	bl	8001260 <timer_run>
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000746:	b672      	cpsid	i
}
 8000748:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074a:	e7fe      	b.n	800074a <Error_Handler+0x8>

0800074c <led_run>:
int status_mode = 0;
int status_mode_0 = 0;
int reset_signal = 1;
char digit_buffer[4] = {'0', '0', '0', '0'};

void led_run() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if (button_flag[0] == 1) {
 8000750:	4b99      	ldr	r3, [pc, #612]	; (80009b8 <led_run+0x26c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d111      	bne.n	800077c <led_run+0x30>
		button_flag[0] = 0;
 8000758:	4b97      	ldr	r3, [pc, #604]	; (80009b8 <led_run+0x26c>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
		reset_signal = 1;
 800075e:	4b97      	ldr	r3, [pc, #604]	; (80009bc <led_run+0x270>)
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
		status_mode++;
 8000764:	4b96      	ldr	r3, [pc, #600]	; (80009c0 <led_run+0x274>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a95      	ldr	r2, [pc, #596]	; (80009c0 <led_run+0x274>)
 800076c:	6013      	str	r3, [r2, #0]
		if (status_mode >= 4) {
 800076e:	4b94      	ldr	r3, [pc, #592]	; (80009c0 <led_run+0x274>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b03      	cmp	r3, #3
 8000774:	dd02      	ble.n	800077c <led_run+0x30>
			status_mode = 0;
 8000776:	4b92      	ldr	r3, [pc, #584]	; (80009c0 <led_run+0x274>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
		}
	}
	if (status_mode == 0) {
 800077c:	4b90      	ldr	r3, [pc, #576]	; (80009c0 <led_run+0x274>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	f040 8221 	bne.w	8000bc8 <led_run+0x47c>
		if (reset_signal == 1) {
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <led_run+0x270>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d125      	bne.n	80007da <led_run+0x8e>
			reset_signal = 0;
 800078e:	4b8b      	ldr	r3, [pc, #556]	; (80009bc <led_run+0x270>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
			timer_flag[1] = 1;
 8000794:	4b8b      	ldr	r3, [pc, #556]	; (80009c4 <led_run+0x278>)
 8000796:	2201      	movs	r2, #1
 8000798:	605a      	str	r2, [r3, #4]
			g_counter = g_time;
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <led_run+0x27c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a8b      	ldr	r2, [pc, #556]	; (80009cc <led_run+0x280>)
 80007a0:	6013      	str	r3, [r2, #0]
			y_counter = y_time;
 80007a2:	4b8b      	ldr	r3, [pc, #556]	; (80009d0 <led_run+0x284>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a8b      	ldr	r2, [pc, #556]	; (80009d4 <led_run+0x288>)
 80007a8:	6013      	str	r3, [r2, #0]
			status_mode_0 = 0;
 80007aa:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <led_run+0x28c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2108      	movs	r1, #8
 80007b4:	4889      	ldr	r0, [pc, #548]	; (80009dc <led_run+0x290>)
 80007b6:	f001 f8d4 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4887      	ldr	r0, [pc, #540]	; (80009dc <led_run+0x290>)
 80007c0:	f001 f8cf 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2110      	movs	r1, #16
 80007c8:	4884      	ldr	r0, [pc, #528]	; (80009dc <led_run+0x290>)
 80007ca:	f001 f8ca 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4881      	ldr	r0, [pc, #516]	; (80009dc <led_run+0x290>)
 80007d6:	f001 f8c4 	bl	8001962 <HAL_GPIO_WritePin>
		}
		if (timer_flag[1] == 1) {
 80007da:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <led_run+0x278>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	f040 8416 	bne.w	8001010 <led_run+0x8c4>
			timer_set(1, 100);
 80007e4:	2164      	movs	r1, #100	; 0x64
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fd22 	bl	8001230 <timer_set>
			if (status_mode_0 == 0) {
 80007ec:	4b7a      	ldr	r3, [pc, #488]	; (80009d8 <led_run+0x28c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d16c      	bne.n	80008ce <led_run+0x182>
				if (g_counter >= g_time) {
 80007f4:	4b75      	ldr	r3, [pc, #468]	; (80009cc <led_run+0x280>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <led_run+0x27c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	db14      	blt.n	800082a <led_run+0xde>
					HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2108      	movs	r1, #8
 8000804:	4875      	ldr	r0, [pc, #468]	; (80009dc <led_run+0x290>)
 8000806:	f001 f8ac 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4873      	ldr	r0, [pc, #460]	; (80009dc <led_run+0x290>)
 8000810:	f001 f8a7 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2110      	movs	r1, #16
 8000818:	4870      	ldr	r0, [pc, #448]	; (80009dc <led_run+0x290>)
 800081a:	f001 f8a2 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	486d      	ldr	r0, [pc, #436]	; (80009dc <led_run+0x290>)
 8000826:	f001 f89c 	bl	8001962 <HAL_GPIO_WritePin>
				}
				digit_buffer[0] = ( (g_counter + y_counter) / 10 ) + '0';
 800082a:	4b68      	ldr	r3, [pc, #416]	; (80009cc <led_run+0x280>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <led_run+0x288>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a6a      	ldr	r2, [pc, #424]	; (80009e0 <led_run+0x294>)
 8000836:	fb82 1203 	smull	r1, r2, r2, r3
 800083a:	1092      	asrs	r2, r2, #2
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	3330      	adds	r3, #48	; 0x30
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <led_run+0x298>)
 8000848:	701a      	strb	r2, [r3, #0]
				digit_buffer[1] = ( (g_counter + y_counter) % 10 ) + '0';
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <led_run+0x280>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b61      	ldr	r3, [pc, #388]	; (80009d4 <led_run+0x288>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	441a      	add	r2, r3
 8000854:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <led_run+0x294>)
 8000856:	fb83 1302 	smull	r1, r3, r3, r2
 800085a:	1099      	asrs	r1, r3, #2
 800085c:	17d3      	asrs	r3, r2, #31
 800085e:	1ac9      	subs	r1, r1, r3
 8000860:	460b      	mov	r3, r1
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	1ad1      	subs	r1, r2, r3
 800086a:	b2cb      	uxtb	r3, r1
 800086c:	3330      	adds	r3, #48	; 0x30
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b5c      	ldr	r3, [pc, #368]	; (80009e4 <led_run+0x298>)
 8000872:	705a      	strb	r2, [r3, #1]
				digit_buffer[2] = ( g_counter / 10 ) + '0';
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <led_run+0x280>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a59      	ldr	r2, [pc, #356]	; (80009e0 <led_run+0x294>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1092      	asrs	r2, r2, #2
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3330      	adds	r3, #48	; 0x30
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b56      	ldr	r3, [pc, #344]	; (80009e4 <led_run+0x298>)
 800088c:	709a      	strb	r2, [r3, #2]
				digit_buffer[3] = ( g_counter % 10 ) + '0';
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <led_run+0x280>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <led_run+0x294>)
 8000894:	fb83 1302 	smull	r1, r3, r3, r2
 8000898:	1099      	asrs	r1, r3, #2
 800089a:	17d3      	asrs	r3, r2, #31
 800089c:	1ac9      	subs	r1, r1, r3
 800089e:	460b      	mov	r3, r1
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	1ad1      	subs	r1, r2, r3
 80008a8:	b2cb      	uxtb	r3, r1
 80008aa:	3330      	adds	r3, #48	; 0x30
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <led_run+0x298>)
 80008b0:	70da      	strb	r2, [r3, #3]
				if (g_counter > 1) {
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <led_run+0x280>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	dd05      	ble.n	80008c6 <led_run+0x17a>
					g_counter--;
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <led_run+0x280>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3b01      	subs	r3, #1
 80008c0:	4a42      	ldr	r2, [pc, #264]	; (80009cc <led_run+0x280>)
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e3a4      	b.n	8001010 <led_run+0x8c4>
				} else {
					status_mode_0 = 1;
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <led_run+0x28c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e3a0      	b.n	8001010 <led_run+0x8c4>
				}
			} else if (status_mode_0 == 1) {
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <led_run+0x28c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	f040 8088 	bne.w	80009e8 <led_run+0x29c>
				if (y_counter >= y_time) {
 80008d8:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <led_run+0x288>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <led_run+0x284>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	db14      	blt.n	800090e <led_run+0x1c2>
					HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <led_run+0x290>)
 80008ea:	f001 f83a 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2120      	movs	r1, #32
 80008f2:	483a      	ldr	r0, [pc, #232]	; (80009dc <led_run+0x290>)
 80008f4:	f001 f835 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2110      	movs	r1, #16
 80008fc:	4837      	ldr	r0, [pc, #220]	; (80009dc <led_run+0x290>)
 80008fe:	f001 f830 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000908:	4834      	ldr	r0, [pc, #208]	; (80009dc <led_run+0x290>)
 800090a:	f001 f82a 	bl	8001962 <HAL_GPIO_WritePin>
				}
				digit_buffer[0] = ( y_counter / 10 ) + '0';
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <led_run+0x288>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <led_run+0x294>)
 8000914:	fb82 1203 	smull	r1, r2, r2, r3
 8000918:	1092      	asrs	r2, r2, #2
 800091a:	17db      	asrs	r3, r3, #31
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	3330      	adds	r3, #48	; 0x30
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <led_run+0x298>)
 8000926:	701a      	strb	r2, [r3, #0]
				digit_buffer[1] = ( y_counter % 10 ) + '0';
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <led_run+0x288>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <led_run+0x294>)
 800092e:	fb83 1302 	smull	r1, r3, r3, r2
 8000932:	1099      	asrs	r1, r3, #2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	460b      	mov	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1ad1      	subs	r1, r2, r3
 8000942:	b2cb      	uxtb	r3, r1
 8000944:	3330      	adds	r3, #48	; 0x30
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <led_run+0x298>)
 800094a:	705a      	strb	r2, [r3, #1]
				digit_buffer[2] = ( y_counter / 10 ) + '0';
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <led_run+0x288>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <led_run+0x294>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1092      	asrs	r2, r2, #2
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3330      	adds	r3, #48	; 0x30
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <led_run+0x298>)
 8000964:	709a      	strb	r2, [r3, #2]
				digit_buffer[3] = ( y_counter % 10 ) + '0';
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <led_run+0x288>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <led_run+0x294>)
 800096c:	fb83 1302 	smull	r1, r3, r3, r2
 8000970:	1099      	asrs	r1, r3, #2
 8000972:	17d3      	asrs	r3, r2, #31
 8000974:	1ac9      	subs	r1, r1, r3
 8000976:	460b      	mov	r3, r1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	1ad1      	subs	r1, r2, r3
 8000980:	b2cb      	uxtb	r3, r1
 8000982:	3330      	adds	r3, #48	; 0x30
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <led_run+0x298>)
 8000988:	70da      	strb	r2, [r3, #3]
				if (y_counter > 1) {
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <led_run+0x288>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	dd05      	ble.n	800099e <led_run+0x252>
					y_counter--;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <led_run+0x288>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <led_run+0x288>)
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e338      	b.n	8001010 <led_run+0x8c4>
				} else {
					status_mode_0 = 2;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <led_run+0x28c>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	601a      	str	r2, [r3, #0]
					g_counter = g_time;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <led_run+0x27c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <led_run+0x280>)
 80009aa:	6013      	str	r3, [r2, #0]
					y_counter = y_time;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <led_run+0x284>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <led_run+0x288>)
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e32c      	b.n	8001010 <led_run+0x8c4>
 80009b6:	bf00      	nop
 80009b8:	2000006c 	.word	0x2000006c
 80009bc:	20000034 	.word	0x20000034
 80009c0:	20000080 	.word	0x20000080
 80009c4:	20000088 	.word	0x20000088
 80009c8:	2000002c 	.word	0x2000002c
 80009cc:	20000078 	.word	0x20000078
 80009d0:	20000030 	.word	0x20000030
 80009d4:	2000007c 	.word	0x2000007c
 80009d8:	20000084 	.word	0x20000084
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	66666667 	.word	0x66666667
 80009e4:	20000038 	.word	0x20000038
				}
			} else if (status_mode_0 == 2) {
 80009e8:	4b6f      	ldr	r3, [pc, #444]	; (8000ba8 <led_run+0x45c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d16c      	bne.n	8000aca <led_run+0x37e>
				if (g_counter >= g_time) {
 80009f0:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <led_run+0x460>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <led_run+0x464>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	db14      	blt.n	8000a26 <led_run+0x2da>
					HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2108      	movs	r1, #8
 8000a00:	486c      	ldr	r0, [pc, #432]	; (8000bb4 <led_run+0x468>)
 8000a02:	f000 ffae 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	486a      	ldr	r0, [pc, #424]	; (8000bb4 <led_run+0x468>)
 8000a0c:	f000 ffa9 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2110      	movs	r1, #16
 8000a14:	4867      	ldr	r0, [pc, #412]	; (8000bb4 <led_run+0x468>)
 8000a16:	f000 ffa4 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	4864      	ldr	r0, [pc, #400]	; (8000bb4 <led_run+0x468>)
 8000a22:	f000 ff9e 	bl	8001962 <HAL_GPIO_WritePin>
				}
				digit_buffer[0] = ( g_counter / 10 ) + '0';
 8000a26:	4b61      	ldr	r3, [pc, #388]	; (8000bac <led_run+0x460>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a63      	ldr	r2, [pc, #396]	; (8000bb8 <led_run+0x46c>)
 8000a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a30:	1092      	asrs	r2, r2, #2
 8000a32:	17db      	asrs	r3, r3, #31
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	3330      	adds	r3, #48	; 0x30
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <led_run+0x470>)
 8000a3e:	701a      	strb	r2, [r3, #0]
				digit_buffer[1] = ( g_counter % 10 ) + '0';
 8000a40:	4b5a      	ldr	r3, [pc, #360]	; (8000bac <led_run+0x460>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b5c      	ldr	r3, [pc, #368]	; (8000bb8 <led_run+0x46c>)
 8000a46:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4a:	1099      	asrs	r1, r3, #2
 8000a4c:	17d3      	asrs	r3, r2, #31
 8000a4e:	1ac9      	subs	r1, r1, r3
 8000a50:	460b      	mov	r3, r1
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	1ad1      	subs	r1, r2, r3
 8000a5a:	b2cb      	uxtb	r3, r1
 8000a5c:	3330      	adds	r3, #48	; 0x30
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <led_run+0x470>)
 8000a62:	705a      	strb	r2, [r3, #1]
				digit_buffer[2] = ( (g_counter + y_counter) / 10 ) + '0';
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <led_run+0x460>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <led_run+0x474>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a52      	ldr	r2, [pc, #328]	; (8000bb8 <led_run+0x46c>)
 8000a70:	fb82 1203 	smull	r1, r2, r2, r3
 8000a74:	1092      	asrs	r2, r2, #2
 8000a76:	17db      	asrs	r3, r3, #31
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	3330      	adds	r3, #48	; 0x30
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <led_run+0x470>)
 8000a82:	709a      	strb	r2, [r3, #2]
				digit_buffer[3] = ( (g_counter + y_counter) % 10 ) + '0';
 8000a84:	4b49      	ldr	r3, [pc, #292]	; (8000bac <led_run+0x460>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <led_run+0x474>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	441a      	add	r2, r3
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <led_run+0x46c>)
 8000a90:	fb83 1302 	smull	r1, r3, r3, r2
 8000a94:	1099      	asrs	r1, r3, #2
 8000a96:	17d3      	asrs	r3, r2, #31
 8000a98:	1ac9      	subs	r1, r1, r3
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	1ad1      	subs	r1, r2, r3
 8000aa4:	b2cb      	uxtb	r3, r1
 8000aa6:	3330      	adds	r3, #48	; 0x30
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <led_run+0x470>)
 8000aac:	70da      	strb	r2, [r3, #3]
				if (g_counter > 1) {
 8000aae:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <led_run+0x460>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	dd05      	ble.n	8000ac2 <led_run+0x376>
					g_counter--;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <led_run+0x460>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	4a3b      	ldr	r2, [pc, #236]	; (8000bac <led_run+0x460>)
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e2a6      	b.n	8001010 <led_run+0x8c4>
				} else {
					status_mode_0 = 3;
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <led_run+0x45c>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e2a2      	b.n	8001010 <led_run+0x8c4>
				}
			} else {
				if (y_counter >= y_time) {
 8000aca:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <led_run+0x474>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <led_run+0x478>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	db14      	blt.n	8000b00 <led_run+0x3b4>
					HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	4836      	ldr	r0, [pc, #216]	; (8000bb4 <led_run+0x468>)
 8000adc:	f000 ff41 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <led_run+0x468>)
 8000ae6:	f000 ff3c 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2110      	movs	r1, #16
 8000aee:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <led_run+0x468>)
 8000af0:	f000 ff37 	bl	8001962 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <led_run+0x468>)
 8000afc:	f000 ff31 	bl	8001962 <HAL_GPIO_WritePin>
				}
				digit_buffer[0] = ( y_counter / 10 ) + '0';
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <led_run+0x474>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <led_run+0x46c>)
 8000b06:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0a:	1092      	asrs	r2, r2, #2
 8000b0c:	17db      	asrs	r3, r3, #31
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	3330      	adds	r3, #48	; 0x30
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <led_run+0x470>)
 8000b18:	701a      	strb	r2, [r3, #0]
				digit_buffer[1] = ( y_counter % 10 ) + '0';
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <led_run+0x474>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <led_run+0x46c>)
 8000b20:	fb83 1302 	smull	r1, r3, r3, r2
 8000b24:	1099      	asrs	r1, r3, #2
 8000b26:	17d3      	asrs	r3, r2, #31
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	1ad1      	subs	r1, r2, r3
 8000b34:	b2cb      	uxtb	r3, r1
 8000b36:	3330      	adds	r3, #48	; 0x30
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <led_run+0x470>)
 8000b3c:	705a      	strb	r2, [r3, #1]
				digit_buffer[2] = ( y_counter / 10 ) + '0';
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <led_run+0x474>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <led_run+0x46c>)
 8000b44:	fb82 1203 	smull	r1, r2, r2, r3
 8000b48:	1092      	asrs	r2, r2, #2
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3330      	adds	r3, #48	; 0x30
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <led_run+0x470>)
 8000b56:	709a      	strb	r2, [r3, #2]
				digit_buffer[3] = ( y_counter % 10 ) + '0';
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <led_run+0x474>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <led_run+0x46c>)
 8000b5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b62:	1099      	asrs	r1, r3, #2
 8000b64:	17d3      	asrs	r3, r2, #31
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad1      	subs	r1, r2, r3
 8000b72:	b2cb      	uxtb	r3, r1
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <led_run+0x470>)
 8000b7a:	70da      	strb	r2, [r3, #3]
				if (y_counter > 1) {
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <led_run+0x474>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	dd05      	ble.n	8000b90 <led_run+0x444>
					y_counter--;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <led_run+0x474>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <led_run+0x474>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e23f      	b.n	8001010 <led_run+0x8c4>
				} else {
					status_mode_0 = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <led_run+0x45c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
					g_counter = g_time;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <led_run+0x464>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <led_run+0x460>)
 8000b9c:	6013      	str	r3, [r2, #0]
					y_counter = y_time;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <led_run+0x478>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <led_run+0x474>)
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e233      	b.n	8001010 <led_run+0x8c4>
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	66666667 	.word	0x66666667
 8000bbc:	20000038 	.word	0x20000038
 8000bc0:	2000007c 	.word	0x2000007c
 8000bc4:	20000030 	.word	0x20000030
				}
			}
		}
	} else if (status_mode == 1) {
 8000bc8:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <led_run+0x5ec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 80c9 	bne.w	8000d64 <led_run+0x618>
		if (reset_signal == 1) {
 8000bd2:	4b5a      	ldr	r3, [pc, #360]	; (8000d3c <led_run+0x5f0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d14d      	bne.n	8000c76 <led_run+0x52a>
			reset_signal = 0;
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <led_run+0x5f0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
			timer_flag[1] = 1;
 8000be0:	4b57      	ldr	r3, [pc, #348]	; (8000d40 <led_run+0x5f4>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
			g_counter = g_time;
 8000be6:	4b57      	ldr	r3, [pc, #348]	; (8000d44 <led_run+0x5f8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <led_run+0x5fc>)
 8000bec:	6013      	str	r3, [r2, #0]
			y_counter = y_time;
 8000bee:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <led_run+0x600>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <led_run+0x604>)
 8000bf4:	6013      	str	r3, [r2, #0]
			digit_buffer[0] = ( (g_counter + y_counter) / 10 ) + '0';
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <led_run+0x5fc>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b55      	ldr	r3, [pc, #340]	; (8000d50 <led_run+0x604>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <led_run+0x608>)
 8000c02:	fb82 1203 	smull	r1, r2, r2, r3
 8000c06:	1092      	asrs	r2, r2, #2
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3330      	adds	r3, #48	; 0x30
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <led_run+0x60c>)
 8000c14:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( (g_counter + y_counter) % 10 ) + '0';
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <led_run+0x5fc>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <led_run+0x604>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	441a      	add	r2, r3
 8000c20:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <led_run+0x608>)
 8000c22:	fb83 1302 	smull	r1, r3, r3, r2
 8000c26:	1099      	asrs	r1, r3, #2
 8000c28:	17d3      	asrs	r3, r2, #31
 8000c2a:	1ac9      	subs	r1, r1, r3
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1ad1      	subs	r1, r2, r3
 8000c36:	b2cb      	uxtb	r3, r1
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <led_run+0x60c>)
 8000c3e:	705a      	strb	r2, [r3, #1]
			digit_buffer[2] = ( 0 ) + '0';
 8000c40:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <led_run+0x60c>)
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	709a      	strb	r2, [r3, #2]
			digit_buffer[3] = ( 2 ) + '0';
 8000c46:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <led_run+0x60c>)
 8000c48:	2232      	movs	r2, #50	; 0x32
 8000c4a:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2108      	movs	r1, #8
 8000c50:	4842      	ldr	r0, [pc, #264]	; (8000d5c <led_run+0x610>)
 8000c52:	f000 fe86 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4840      	ldr	r0, [pc, #256]	; (8000d5c <led_run+0x610>)
 8000c5c:	f000 fe81 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	483d      	ldr	r0, [pc, #244]	; (8000d5c <led_run+0x610>)
 8000c66:	f000 fe7c 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c70:	483a      	ldr	r0, [pc, #232]	; (8000d5c <led_run+0x610>)
 8000c72:	f000 fe76 	bl	8001962 <HAL_GPIO_WritePin>
		}
		if (button_flag[1] == 1) {
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <led_run+0x614>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d136      	bne.n	8000cec <led_run+0x5a0>
			button_flag[1] = 0;
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <led_run+0x614>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
			g_counter++;
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <led_run+0x5fc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <led_run+0x5fc>)
 8000c8c:	6013      	str	r3, [r2, #0]
			if (g_counter + y_counter >= 100) {
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <led_run+0x5fc>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <led_run+0x604>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	2b63      	cmp	r3, #99	; 0x63
 8000c9a:	dd02      	ble.n	8000ca2 <led_run+0x556>
				g_counter = 1;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <led_run+0x5fc>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
			}
			digit_buffer[0] = ( (g_counter + y_counter) / 10 ) + '0';
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <led_run+0x5fc>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <led_run+0x604>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <led_run+0x608>)
 8000cae:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb2:	1092      	asrs	r2, r2, #2
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	3330      	adds	r3, #48	; 0x30
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <led_run+0x60c>)
 8000cc0:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( (g_counter + y_counter) % 10 ) + '0';
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <led_run+0x5fc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <led_run+0x604>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	441a      	add	r2, r3
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <led_run+0x608>)
 8000cce:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd2:	1099      	asrs	r1, r3, #2
 8000cd4:	17d3      	asrs	r3, r2, #31
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	1ad1      	subs	r1, r2, r3
 8000ce2:	b2cb      	uxtb	r3, r1
 8000ce4:	3330      	adds	r3, #48	; 0x30
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <led_run+0x60c>)
 8000cea:	705a      	strb	r2, [r3, #1]
		}
		if (button_flag[2] == 1) {
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <led_run+0x614>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d106      	bne.n	8000d02 <led_run+0x5b6>
			button_flag[2] = 0;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <led_run+0x614>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
			g_time = g_counter;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <led_run+0x5fc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <led_run+0x5f8>)
 8000d00:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[1] == 1) {
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <led_run+0x5f4>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	f040 8182 	bne.w	8001010 <led_run+0x8c4>
			timer_set(1, 25);
 8000d0c:	2119      	movs	r1, #25
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fa8e 	bl	8001230 <timer_set>
			HAL_GPIO_TogglePin(tf0_GPIO_Port, tf0_Pin);
 8000d14:	2108      	movs	r1, #8
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <led_run+0x610>)
 8000d18:	f000 fe3b 	bl	8001992 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(tf1_GPIO_Port, tf1_Pin);
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	480f      	ldr	r0, [pc, #60]	; (8000d5c <led_run+0x610>)
 8000d20:	f000 fe37 	bl	8001992 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(tf2_GPIO_Port, tf2_Pin);
 8000d24:	2110      	movs	r1, #16
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <led_run+0x610>)
 8000d28:	f000 fe33 	bl	8001992 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(tf3_GPIO_Port, tf3_Pin);
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	480a      	ldr	r0, [pc, #40]	; (8000d5c <led_run+0x610>)
 8000d32:	f000 fe2e 	bl	8001992 <HAL_GPIO_TogglePin>
 8000d36:	e16b      	b.n	8001010 <led_run+0x8c4>
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000088 	.word	0x20000088
 8000d44:	2000002c 	.word	0x2000002c
 8000d48:	20000078 	.word	0x20000078
 8000d4c:	20000030 	.word	0x20000030
 8000d50:	2000007c 	.word	0x2000007c
 8000d54:	66666667 	.word	0x66666667
 8000d58:	20000038 	.word	0x20000038
 8000d5c:	40010c00 	.word	0x40010c00
 8000d60:	2000006c 	.word	0x2000006c
		}
	} else if (status_mode == 2) {
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <led_run+0x760>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	f040 80b5 	bne.w	8000ed8 <led_run+0x78c>
		if (reset_signal == 1) {
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <led_run+0x764>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d147      	bne.n	8000e06 <led_run+0x6ba>
			reset_signal = 0;
 8000d76:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <led_run+0x764>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
			timer_flag[1] = 1;
 8000d7c:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <led_run+0x768>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	605a      	str	r2, [r3, #4]
			g_counter = g_time;
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <led_run+0x76c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a4d      	ldr	r2, [pc, #308]	; (8000ebc <led_run+0x770>)
 8000d88:	6013      	str	r3, [r2, #0]
			y_counter = y_time;
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <led_run+0x774>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a4d      	ldr	r2, [pc, #308]	; (8000ec4 <led_run+0x778>)
 8000d90:	6013      	str	r3, [r2, #0]
			digit_buffer[0] = ( y_counter / 10 ) + '0';
 8000d92:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <led_run+0x778>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <led_run+0x77c>)
 8000d98:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9c:	1092      	asrs	r2, r2, #2
 8000d9e:	17db      	asrs	r3, r3, #31
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	3330      	adds	r3, #48	; 0x30
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <led_run+0x780>)
 8000daa:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( y_counter % 10 ) + '0';
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <led_run+0x778>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <led_run+0x77c>)
 8000db2:	fb83 1302 	smull	r1, r3, r3, r2
 8000db6:	1099      	asrs	r1, r3, #2
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad1      	subs	r1, r2, r3
 8000dc6:	b2cb      	uxtb	r3, r1
 8000dc8:	3330      	adds	r3, #48	; 0x30
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <led_run+0x780>)
 8000dce:	705a      	strb	r2, [r3, #1]
			digit_buffer[2] = ( 0 ) + '0';
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <led_run+0x780>)
 8000dd2:	2230      	movs	r2, #48	; 0x30
 8000dd4:	709a      	strb	r2, [r3, #2]
			digit_buffer[3] = ( 3 ) + '0';
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <led_run+0x780>)
 8000dd8:	2233      	movs	r2, #51	; 0x33
 8000dda:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2108      	movs	r1, #8
 8000de0:	483b      	ldr	r0, [pc, #236]	; (8000ed0 <led_run+0x784>)
 8000de2:	f000 fdbe 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4839      	ldr	r0, [pc, #228]	; (8000ed0 <led_run+0x784>)
 8000dec:	f000 fdb9 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	4836      	ldr	r0, [pc, #216]	; (8000ed0 <led_run+0x784>)
 8000df6:	f000 fdb4 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e00:	4833      	ldr	r0, [pc, #204]	; (8000ed0 <led_run+0x784>)
 8000e02:	f000 fdae 	bl	8001962 <HAL_GPIO_WritePin>
		}
		if (button_flag[1] == 1) {
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <led_run+0x788>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d130      	bne.n	8000e70 <led_run+0x724>
			button_flag[1] = 0;
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <led_run+0x788>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
			y_counter++;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <led_run+0x778>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <led_run+0x778>)
 8000e1c:	6013      	str	r3, [r2, #0]
			if (g_counter + y_counter >= 100) {
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <led_run+0x770>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <led_run+0x778>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	2b63      	cmp	r3, #99	; 0x63
 8000e2a:	dd02      	ble.n	8000e32 <led_run+0x6e6>
				y_counter = 1;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <led_run+0x778>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
			}
			digit_buffer[0] = ( y_counter / 10 ) + '0';
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <led_run+0x778>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <led_run+0x77c>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1092      	asrs	r2, r2, #2
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3330      	adds	r3, #48	; 0x30
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <led_run+0x780>)
 8000e4a:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( y_counter % 10 ) + '0';
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <led_run+0x778>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <led_run+0x77c>)
 8000e52:	fb83 1302 	smull	r1, r3, r3, r2
 8000e56:	1099      	asrs	r1, r3, #2
 8000e58:	17d3      	asrs	r3, r2, #31
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad1      	subs	r1, r2, r3
 8000e66:	b2cb      	uxtb	r3, r1
 8000e68:	3330      	adds	r3, #48	; 0x30
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <led_run+0x780>)
 8000e6e:	705a      	strb	r2, [r3, #1]
		}
		if (button_flag[2] == 1) {
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <led_run+0x788>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d106      	bne.n	8000e86 <led_run+0x73a>
			button_flag[2] = 0;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <led_run+0x788>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
			y_time = y_counter;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <led_run+0x778>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <led_run+0x774>)
 8000e84:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[1] == 1) {
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <led_run+0x768>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f040 80c0 	bne.w	8001010 <led_run+0x8c4>
			timer_set(1, 25);
 8000e90:	2119      	movs	r1, #25
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 f9cc 	bl	8001230 <timer_set>
			HAL_GPIO_TogglePin(tf1_GPIO_Port, tf1_Pin);
 8000e98:	2120      	movs	r1, #32
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <led_run+0x784>)
 8000e9c:	f000 fd79 	bl	8001992 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(tf3_GPIO_Port, tf3_Pin);
 8000ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <led_run+0x784>)
 8000ea6:	f000 fd74 	bl	8001992 <HAL_GPIO_TogglePin>
 8000eaa:	e0b1      	b.n	8001010 <led_run+0x8c4>
 8000eac:	20000080 	.word	0x20000080
 8000eb0:	20000034 	.word	0x20000034
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	2000002c 	.word	0x2000002c
 8000ebc:	20000078 	.word	0x20000078
 8000ec0:	20000030 	.word	0x20000030
 8000ec4:	2000007c 	.word	0x2000007c
 8000ec8:	66666667 	.word	0x66666667
 8000ecc:	20000038 	.word	0x20000038
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	2000006c 	.word	0x2000006c
		}
	} else {
		if (reset_signal == 1) {
 8000ed8:	4b5c      	ldr	r3, [pc, #368]	; (800104c <led_run+0x900>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d147      	bne.n	8000f70 <led_run+0x824>
			reset_signal = 0;
 8000ee0:	4b5a      	ldr	r3, [pc, #360]	; (800104c <led_run+0x900>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
			timer_flag[1] = 1;
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <led_run+0x904>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
			g_counter = g_time;
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <led_run+0x908>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a59      	ldr	r2, [pc, #356]	; (8001058 <led_run+0x90c>)
 8000ef2:	6013      	str	r3, [r2, #0]
			y_counter = y_time;
 8000ef4:	4b59      	ldr	r3, [pc, #356]	; (800105c <led_run+0x910>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a59      	ldr	r2, [pc, #356]	; (8001060 <led_run+0x914>)
 8000efa:	6013      	str	r3, [r2, #0]
			digit_buffer[0] = ( g_counter / 10 ) + '0';
 8000efc:	4b56      	ldr	r3, [pc, #344]	; (8001058 <led_run+0x90c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a58      	ldr	r2, [pc, #352]	; (8001064 <led_run+0x918>)
 8000f02:	fb82 1203 	smull	r1, r2, r2, r3
 8000f06:	1092      	asrs	r2, r2, #2
 8000f08:	17db      	asrs	r3, r3, #31
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	3330      	adds	r3, #48	; 0x30
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b55      	ldr	r3, [pc, #340]	; (8001068 <led_run+0x91c>)
 8000f14:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( g_counter % 10 ) + '0';
 8000f16:	4b50      	ldr	r3, [pc, #320]	; (8001058 <led_run+0x90c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b52      	ldr	r3, [pc, #328]	; (8001064 <led_run+0x918>)
 8000f1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f20:	1099      	asrs	r1, r3, #2
 8000f22:	17d3      	asrs	r3, r2, #31
 8000f24:	1ac9      	subs	r1, r1, r3
 8000f26:	460b      	mov	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	1ad1      	subs	r1, r2, r3
 8000f30:	b2cb      	uxtb	r3, r1
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b4c      	ldr	r3, [pc, #304]	; (8001068 <led_run+0x91c>)
 8000f38:	705a      	strb	r2, [r3, #1]
			digit_buffer[2] = ( 0 ) + '0';
 8000f3a:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <led_run+0x91c>)
 8000f3c:	2230      	movs	r2, #48	; 0x30
 8000f3e:	709a      	strb	r2, [r3, #2]
			digit_buffer[3] = ( 4 ) + '0';
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <led_run+0x91c>)
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(tf0_GPIO_Port, tf0_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4848      	ldr	r0, [pc, #288]	; (800106c <led_run+0x920>)
 8000f4c:	f000 fd09 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf1_GPIO_Port, tf1_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2120      	movs	r1, #32
 8000f54:	4845      	ldr	r0, [pc, #276]	; (800106c <led_run+0x920>)
 8000f56:	f000 fd04 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf2_GPIO_Port, tf2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	4843      	ldr	r0, [pc, #268]	; (800106c <led_run+0x920>)
 8000f60:	f000 fcff 	bl	8001962 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tf3_GPIO_Port, tf3_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4840      	ldr	r0, [pc, #256]	; (800106c <led_run+0x920>)
 8000f6c:	f000 fcf9 	bl	8001962 <HAL_GPIO_WritePin>
		}
		if (button_flag[1] == 1) {
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <led_run+0x924>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d130      	bne.n	8000fda <led_run+0x88e>
			button_flag[1] = 0;
 8000f78:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <led_run+0x924>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
			g_counter++;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <led_run+0x90c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <led_run+0x90c>)
 8000f86:	6013      	str	r3, [r2, #0]
			if (g_counter + y_counter >= 100) {
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <led_run+0x90c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <led_run+0x914>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	2b63      	cmp	r3, #99	; 0x63
 8000f94:	dd02      	ble.n	8000f9c <led_run+0x850>
				g_counter = 1;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <led_run+0x90c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
			}
			digit_buffer[0] = ( g_counter / 10 ) + '0';
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <led_run+0x90c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a30      	ldr	r2, [pc, #192]	; (8001064 <led_run+0x918>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1092      	asrs	r2, r2, #2
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3330      	adds	r3, #48	; 0x30
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <led_run+0x91c>)
 8000fb4:	701a      	strb	r2, [r3, #0]
			digit_buffer[1] = ( g_counter % 10 ) + '0';
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <led_run+0x90c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <led_run+0x918>)
 8000fbc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc0:	1099      	asrs	r1, r3, #2
 8000fc2:	17d3      	asrs	r3, r2, #31
 8000fc4:	1ac9      	subs	r1, r1, r3
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	1ad1      	subs	r1, r2, r3
 8000fd0:	b2cb      	uxtb	r3, r1
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <led_run+0x91c>)
 8000fd8:	705a      	strb	r2, [r3, #1]
		}
		if (button_flag[2] == 1) {
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <led_run+0x924>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d106      	bne.n	8000ff0 <led_run+0x8a4>
			button_flag[2] = 0;
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <led_run+0x924>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
			g_time = g_counter;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <led_run+0x90c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <led_run+0x908>)
 8000fee:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[1] == 1) {
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <led_run+0x904>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <led_run+0x8c4>
			timer_set(1, 25);
 8000ff8:	2119      	movs	r1, #25
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 f918 	bl	8001230 <timer_set>
			HAL_GPIO_TogglePin(tf0_GPIO_Port, tf0_Pin);
 8001000:	2108      	movs	r1, #8
 8001002:	481a      	ldr	r0, [pc, #104]	; (800106c <led_run+0x920>)
 8001004:	f000 fcc5 	bl	8001992 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(tf2_GPIO_Port, tf2_Pin);
 8001008:	2110      	movs	r1, #16
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <led_run+0x920>)
 800100c:	f000 fcc1 	bl	8001992 <HAL_GPIO_TogglePin>
		}
	}
	lcd_goto_XY(0, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fa24 	bl	8000460 <lcd_goto_XY>
	lcd_send_data(digit_buffer[0]);
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <led_run+0x91c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9c1 	bl	80003a4 <lcd_send_data>
	lcd_send_data(digit_buffer[1]);
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <led_run+0x91c>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f9bc 	bl	80003a4 <lcd_send_data>
	lcd_goto_XY(0, 14);
 800102c:	210e      	movs	r1, #14
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fa16 	bl	8000460 <lcd_goto_XY>
	lcd_send_data(digit_buffer[2]);
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <led_run+0x91c>)
 8001036:	789b      	ldrb	r3, [r3, #2]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f9b3 	bl	80003a4 <lcd_send_data>
	lcd_send_data(digit_buffer[3]);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <led_run+0x91c>)
 8001040:	78db      	ldrb	r3, [r3, #3]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f9ae 	bl	80003a4 <lcd_send_data>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000034 	.word	0x20000034
 8001050:	20000088 	.word	0x20000088
 8001054:	2000002c 	.word	0x2000002c
 8001058:	20000078 	.word	0x20000078
 800105c:	20000030 	.word	0x20000030
 8001060:	2000007c 	.word	0x2000007c
 8001064:	66666667 	.word	0x66666667
 8001068:	20000038 	.word	0x20000038
 800106c:	40010c00 	.word	0x40010c00
 8001070:	2000006c 	.word	0x2000006c

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_I2C_MspInit+0x90>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d132      	bne.n	800115e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_I2C_MspInit+0x94>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_I2C_MspInit+0x94>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001116:	2312      	movs	r3, #18
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <HAL_I2C_MspInit+0x98>)
 8001126:	f000 fa81 	bl	800162c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_I2C_MspInit+0x9c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x9c>)
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_I2C_MspInit+0x94>)
 800114c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	40021000 	.word	0x40021000
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40010000 	.word	0x40010000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d113      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	201c      	movs	r0, #28
 80011a8:	f000 fa09 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ac:	201c      	movs	r0, #28
 80011ae:	f000 fa22 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f000 f8c3 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f001 fcc7 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000e4 	.word	0x200000e4

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <timer_set>:
#define n0_timer 2

int timer_flag[n0_timer] = {0, 0};
int timer_counter[n0_timer] = {100, 100};

void timer_set(int index, int duration) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <timer_set+0x28>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2100      	movs	r1, #0
 8001240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration;
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <timer_set+0x2c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000088 	.word	0x20000088
 800125c:	20000040 	.word	0x20000040

08001260 <timer_run>:

void timer_run() {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
	for (int i = 0; i < n0_timer; i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	e017      	b.n	800129c <timer_run+0x3c>
		if (timer_counter[i] > 1) {
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <timer_run+0x50>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	2b01      	cmp	r3, #1
 8001276:	dd09      	ble.n	800128c <timer_run+0x2c>
			timer_counter[i]--;
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <timer_run+0x50>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	490b      	ldr	r1, [pc, #44]	; (80012b0 <timer_run+0x50>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800128a:	e004      	b.n	8001296 <timer_run+0x36>
		} else {
			timer_flag[i] = 1;
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <timer_run+0x54>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2101      	movs	r1, #1
 8001292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < n0_timer; i++) {
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	dde4      	ble.n	800126c <timer_run+0xc>
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000040 	.word	0x20000040
 80012b4:	20000088 	.word	0x20000088

080012b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012de:	f7ff ffa1 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f001 ffb9 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e6:	f7ff f8dd 	bl	80004a4 <main>
  bx lr
 80012ea:	4770      	bx	lr
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80012f4:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 80012f8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80012fc:	20000130 	.word	0x20000130

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f947 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	200f      	movs	r0, #15
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fea8 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f95f 	bl	8001612 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f927 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000003c 	.word	0x2000003c
 8001388:	2000004c 	.word	0x2000004c
 800138c:	20000048 	.word	0x20000048

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_IncTick+0x20>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	2000004c 	.word	0x2000004c
 80013b0:	2000012c 	.word	0x2000012c

080013b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_GetTick+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	2000012c 	.word	0x2000012c

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fff0 	bl	80013b4 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffe0 	bl	80013b4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000004c 	.word	0x2000004c

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <__NVIC_EnableIRQ+0x34>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff2d 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff42 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff35 	bl	8001474 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e169      	b.n	8001914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8158 	bne.w	800190e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a9a      	ldr	r2, [pc, #616]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a96      	ldr	r2, [pc, #600]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a94      	ldr	r2, [pc, #592]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a92      	ldr	r2, [pc, #584]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a90      	ldr	r2, [pc, #576]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a79      	ldr	r2, [pc, #484]	; (80018e0 <HAL_GPIO_Init+0x2b4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80b1 	beq.w	800190e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a40      	ldr	r2, [pc, #256]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3f      	ldr	r2, [pc, #252]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00d      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_GPIO_Init+0x1e4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3d      	ldr	r2, [pc, #244]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_GPIO_Init+0x1e0>
 8001808:	2303      	movs	r3, #3
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 800180c:	2304      	movs	r3, #4
 800180e:	e004      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001810:	2302      	movs	r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001818:	2300      	movs	r3, #0
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182a:	492f      	ldr	r1, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	492c      	ldr	r1, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4928      	ldr	r1, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4922      	ldr	r1, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	491e      	ldr	r1, [pc, #120]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4918      	ldr	r1, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4914      	ldr	r1, [pc, #80]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e021      	b.n	800190e <HAL_GPIO_Init+0x2e2>
 80018ca:	bf00      	nop
 80018cc:	10320000 	.word	0x10320000
 80018d0:	10310000 	.word	0x10310000
 80018d4:	10220000 	.word	0x10220000
 80018d8:	10210000 	.word	0x10210000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	10110000 	.word	0x10110000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40011400 	.word	0x40011400
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <HAL_GPIO_Init+0x304>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae8e 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001972:	787b      	ldrb	r3, [r7, #1]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001978:	887a      	ldrh	r2, [r7, #2]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800197e:	e003      	b.n	8001988 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	400b      	ands	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e12b      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fb74 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a28:	f000 ffea 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a81      	ldr	r2, [pc, #516]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d807      	bhi.n	8001a48 <HAL_I2C_Init+0x84>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <HAL_I2C_Init+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x92>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	; (8001c40 <HAL_I2C_Init+0x27c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0e7      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a78      	ldr	r2, [pc, #480]	; (8001c44 <HAL_I2C_Init+0x280>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d802      	bhi.n	8001a98 <HAL_I2C_Init+0xd4>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	e009      	b.n	8001aac <HAL_I2C_Init+0xe8>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <HAL_I2C_Init+0x284>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	495c      	ldr	r1, [pc, #368]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d819      	bhi.n	8001b00 <HAL_I2C_Init+0x13c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_I2C_Init+0x138>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e59      	subs	r1, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afa:	e051      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e04f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_I2C_Init+0x168>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e012      	b.n	8001b52 <HAL_I2C_Init+0x18e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x196>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e022      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <HAL_I2C_Init+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e58      	subs	r0, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	e00f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6911      	ldr	r1, [r2, #16]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68d2      	ldr	r2, [r2, #12]
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	000186a0 	.word	0x000186a0
 8001c3c:	001e847f 	.word	0x001e847f
 8001c40:	003d08ff 	.word	0x003d08ff
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fba8 	bl	80013b4 <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	f040 80e0 	bne.w	8001e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4970      	ldr	r1, [pc, #448]	; (8001e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f964 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0d3      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_Master_Transmit+0x50>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0cc      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d007      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2221      	movs	r2, #33	; 0x21
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	893a      	ldrh	r2, [r7, #8]
 8001cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a50      	ldr	r2, [pc, #320]	; (8001e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6a3a      	ldr	r2, [r7, #32]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f89c 	bl	8001e48 <I2C_MasterRequestWrite>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e08d      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d30:	e066      	b.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f9de 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d107      	bne.n	8001d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d017      	beq.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f9ce 	bl	800217a <I2C_WaitOnBTFFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e01a      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d194      	bne.n	8001d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00100002 	.word	0x00100002
 8001e44:	ffff0000 	.word	0xffff0000

08001e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d006      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d107      	bne.n	8001e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f84f 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec2:	d103      	bne.n	8001ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e035      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e01b      	b.n	8001f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030f 	orn	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <I2C_MasterRequestWrite+0xfc>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f875 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e010      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <I2C_MasterRequestWrite+0x100>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f865 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010008 	.word	0x00010008
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f5c:	e025      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d021      	beq.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7ff fa25 	bl	80013b4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e023      	b.n	8001ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10d      	bne.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	e00c      	b.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d0b6      	beq.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002008:	e051      	b.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d123      	bne.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e046      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d021      	beq.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206a:	f7ff f9a3 	bl	80013b4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d116      	bne.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e020      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10c      	bne.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	e00b      	b.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	43da      	mvns	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d18d      	bne.n	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002104:	e02d      	b.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f878 	bl	80021fc <I2C_IsAcknowledgeFailed>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e02d      	b.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d021      	beq.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7ff f949 	bl	80013b4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d116      	bne.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d1ca      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002186:	e02d      	b.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f837 	bl	80021fc <I2C_IsAcknowledgeFailed>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e02d      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d021      	beq.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7ff f908 	bl	80013b4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e007      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d1ca      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d11b      	bne.n	800224c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800221c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e26c      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8087 	beq.w	8002386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b92      	ldr	r3, [pc, #584]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d112      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
 8002290:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d10b      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d06c      	beq.n	8002384 <HAL_RCC_OscConfig+0x12c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d168      	bne.n	8002384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e246      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x76>
 80022c0:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7f      	ldr	r2, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0xbc>
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 8002314:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff f83e 	bl	80013b4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff f83a 	bl	80013b4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1fa      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xe4>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff f82a 	bl	80013b4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f826 	bl	80013b4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1e6      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x10c>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1ba      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4939      	ldr	r1, [pc, #228]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe ffdf 	bl	80013b4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe ffdb 	bl	80013b4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e19b      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe ffbe 	bl	80013b4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7fe ffba 	bl	80013b4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e17a      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d03a      	beq.n	80024dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7fe ff9e 	bl	80013b4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe ff9a 	bl	80013b4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e15a      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f000 fac4 	bl	8002a28 <RCC_Delay>
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe ff84 	bl	80013b4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e00f      	b.n	80024d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe ff80 	bl	80013b4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e140      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	42420000 	.word	0x42420000
 80024cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e9      	bne.n	80024b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a6 	beq.w	8002636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b97      	ldr	r3, [pc, #604]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a93      	ldr	r2, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b91      	ldr	r3, [pc, #580]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b8e      	ldr	r3, [pc, #568]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe ff41 	bl	80013b4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe ff3d 	bl	80013b4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0fd      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x312>
 800255c:	4b7b      	ldr	r3, [pc, #492]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a7a      	ldr	r2, [pc, #488]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x334>
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a75      	ldr	r2, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x356>
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe fef1 	bl	80013b4 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe feed 	bl	80013b4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0ab      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x37e>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fedb 	bl	80013b4 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fed7 	bl	80013b4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e095      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a47      	ldr	r2, [pc, #284]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8081 	beq.w	8002742 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d061      	beq.n	8002710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d146      	bne.n	80026e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe feab 	bl	80013b4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fea7 	bl	80013b4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e067      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	492d      	ldr	r1, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a19      	ldr	r1, [r3, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	430b      	orrs	r3, r1
 80026ae:	4927      	ldr	r1, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe fe7b 	bl	80013b4 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fe77 	bl	80013b4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e037      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46a>
 80026e0:	e02f      	b.n	8002742 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fe64 	bl	80013b4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fe60 	bl	80013b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e020      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x498>
 800270e:	e018      	b.n	8002742 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	42420060 	.word	0x42420060

08002758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d0      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d910      	bls.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4965      	ldr	r1, [pc, #404]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d040      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e073      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4936      	ldr	r1, [pc, #216]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fe fdb4 	bl	80013b4 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe fdb0 	bl	80013b4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e053      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d210      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4922      	ldr	r1, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 f821 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	; (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1cc>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fd12 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	40021000 	.word	0x40021000
 8002920:	080032d8 	.word	0x080032d8
 8002924:	2000003c 	.word	0x2000003c
 8002928:	20000048 	.word	0x20000048

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b490      	push	{r4, r7}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002934:	1d3c      	adds	r4, r7, #4
 8002936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800293c:	f240 2301 	movw	r3, #513	; 0x201
 8002940:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x40>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x46>
 800296a:	e02d      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	e02d      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297e:	4413      	add	r3, r2
 8002980:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002984:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c5b      	lsrs	r3, r3, #17
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800299e:	4413      	add	r3, r2
 80029a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029aa:	fb02 f203 	mul.w	r2, r2, r3
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e004      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	623b      	str	r3, [r7, #32]
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ca:	623b      	str	r3, [r7, #32]
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc90      	pop	{r4, r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	080032c8 	.word	0x080032c8
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	003d0900 	.word	0x003d0900

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_RCC_GetHCLKFreq+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	2000003c 	.word	0x2000003c

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff2 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	080032e8 	.word	0x080032e8

08002a28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <RCC_Delay+0x34>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <RCC_Delay+0x38>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0a5b      	lsrs	r3, r3, #9
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a44:	bf00      	nop
  }
  while (Delay --);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	60fa      	str	r2, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f9      	bne.n	8002a44 <RCC_Delay+0x1c>
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	2000003c 	.word	0x2000003c
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e041      	b.n	8002afa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fb74 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f000 fa70 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d001      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e03a      	b.n	8002b92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_TIM_Base_Start_IT+0x98>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x58>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b46:	d009      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x58>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x58>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d111      	bne.n	8002b80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d010      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	e007      	b.n	8002b90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0202 	mvn.w	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9b1 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9a4 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f9b3 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0204 	mvn.w	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f987 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f97a 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f989 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f95d 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f950 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f95f 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f933 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f926 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f935 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fcfc 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa77 	bl	8003246 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8f9 	bl	8002f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0220 	mvn.w	r2, #32
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa42 	bl	8003234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIM_ConfigClockSource+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0b3      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x180>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e08:	d03e      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0xd0>
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0e:	f200 8087 	bhi.w	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	f000 8085 	beq.w	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d87f      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b70      	cmp	r3, #112	; 0x70
 8002e22:	d01a      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xa2>
 8002e24:	2b70      	cmp	r3, #112	; 0x70
 8002e26:	d87b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b60      	cmp	r3, #96	; 0x60
 8002e2a:	d050      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x116>
 8002e2c:	2b60      	cmp	r3, #96	; 0x60
 8002e2e:	d877      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e30:	2b50      	cmp	r3, #80	; 0x50
 8002e32:	d03c      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xf6>
 8002e34:	2b50      	cmp	r3, #80	; 0x50
 8002e36:	d873      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d058      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x136>
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d86f      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e40:	2b30      	cmp	r3, #48	; 0x30
 8002e42:	d064      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x156>
 8002e44:	2b30      	cmp	r3, #48	; 0x30
 8002e46:	d86b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d060      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x156>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d867      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x156>
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d05a      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e58:	e062      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f000 f966 	bl	800313a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	609a      	str	r2, [r3, #8]
      break;
 8002e86:	e04e      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f000 f94f 	bl	800313a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eaa:	609a      	str	r2, [r3, #8]
      break;
 8002eac:	e03b      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 f8c6 	bl	800304c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2150      	movs	r1, #80	; 0x50
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f91d 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e02b      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 f8e4 	bl	80030a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2160      	movs	r1, #96	; 0x60
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f90d 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e01b      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f000 f8a6 	bl	800304c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f8fd 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e00b      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f000 f8f4 	bl	8003106 <TIM_ITRx_SetConfig>
        break;
 8002f1e:	e002      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a29      	ldr	r2, [pc, #164]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d007      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <TIM_Base_SetConfig+0xbc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a25      	ldr	r2, [pc, #148]	; (8003048 <TIM_Base_SetConfig+0xc0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d108      	bne.n	8002fca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <TIM_Base_SetConfig+0xbc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <TIM_Base_SetConfig+0xc0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800

0800304c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0201 	bic.w	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 030a 	bic.w	r3, r3, #10
 8003088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f023 0210 	bic.w	r2, r3, #16
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	031b      	lsls	r3, r3, #12
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	f043 0307 	orr.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313a:	b480      	push	{r7}
 800313c:	b087      	sub	sp, #28
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003154:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	021a      	lsls	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	431a      	orrs	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	609a      	str	r2, [r3, #8]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800318c:	2302      	movs	r3, #2
 800318e:	e046      	b.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d009      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a12      	ldr	r2, [pc, #72]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a10      	ldr	r2, [pc, #64]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10c      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	2600      	movs	r6, #0
 800325c:	4d0c      	ldr	r5, [pc, #48]	; (8003290 <__libc_init_array+0x38>)
 800325e:	4c0d      	ldr	r4, [pc, #52]	; (8003294 <__libc_init_array+0x3c>)
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	42a6      	cmp	r6, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	f000 f822 	bl	80032b0 <_init>
 800326c:	2600      	movs	r6, #0
 800326e:	4d0a      	ldr	r5, [pc, #40]	; (8003298 <__libc_init_array+0x40>)
 8003270:	4c0a      	ldr	r4, [pc, #40]	; (800329c <__libc_init_array+0x44>)
 8003272:	1b64      	subs	r4, r4, r5
 8003274:	10a4      	asrs	r4, r4, #2
 8003276:	42a6      	cmp	r6, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003280:	4798      	blx	r3
 8003282:	3601      	adds	r6, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	f855 3b04 	ldr.w	r3, [r5], #4
 800328a:	4798      	blx	r3
 800328c:	3601      	adds	r6, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	080032f0 	.word	0x080032f0
 8003294:	080032f0 	.word	0x080032f0
 8003298:	080032f0 	.word	0x080032f0
 800329c:	080032f4 	.word	0x080032f4

080032a0 <memset>:
 80032a0:	4603      	mov	r3, r0
 80032a2:	4402      	add	r2, r0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d100      	bne.n	80032aa <memset+0xa>
 80032a8:	4770      	bx	lr
 80032aa:	f803 1b01 	strb.w	r1, [r3], #1
 80032ae:	e7f9      	b.n	80032a4 <memset+0x4>

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
